@page "/"

@implements IDisposable
@inject IJSRuntime JsRuntime

<PageTitle>MattParkerDev</PageTitle>

<MudPaper Class="pa-4" Elevation="4">
    <MudStack Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Row="true">
        <MudContainer Style="max-width: 50%" Class="mx-0">
            <MudText Align="Align.Center" Typo="Typo.h3" GutterBottom="true">Hi, I'm Matt Parker! 👋</MudText>
            <MudText Align="Align.Center" Class="d-none d-sm-block" Typo="Typo.body1" Style="font-weight: bold" >Software Engineer at SSW | C# | .NET | Blazor | TypeScript | React </MudText>
            <MudContainer Class="d-none d-md-block mx-0 px-0 mt-3">
                <MudStack Justify="Justify.SpaceEvenly" Row="true">
                    <MudChip Href="https://ssw.com.au/people/matt-parker" Target="_blank" Icon="@Icons.Material.Filled.Person" Color="Color.Error">SSW.People</MudChip>
                    <MudChip Href="https://www.linkedin.com/in/mattparkerdev" Target="_blank" Icon="@Icons.Custom.Brands.LinkedIn" Color="Color.Primary">LinkedIn</MudChip>
                    <MudChip Href="https://github.com/MattParkerDev" Target="_blank" Icon="@Icons.Custom.Brands.GitHub" Color="Color.Dark">GitHub</MudChip>
                    <MudChip Href="https://twitter.com/MattParkerDev" Target="_blank" Icon="@Icons.Custom.Brands.Twitter" Color="Color.Info">Twitter</MudChip>
                </MudStack>
            </MudContainer>

            <MudSpacer />
        </MudContainer>
        
        @* TODO: Click to make float up and down *@
        <style>
            .avatar-float {
                animation: float 4s ease-in-out @_animationLoopIterations;
            }
            @@keyframes float {
                0% {
                    transform: translatey(0px);
                }
                50% {
                    transform: translatey(-20px);
                }
                100% {
                    transform: translatey(0px);
                }
            }
        </style>
        <MudAvatar @onanimationend="RemoveAnimationClassIfScheduled" @onclick="ScheduleAnimationOrCancelAnimation" Class="@_avatarIconClass" Elevation="16" Style="width: 300px; height: 300px; cursor: pointer;">
            <MudImage Src="img/github-profile-pic.png"/>
        </MudAvatar>
    </MudStack>
    
    <MudText Class="d-flex d-sm-none" Typo="Typo.body1" Style="font-weight: bold" >Software Engineer at SSW<br/> C# | .NET | Blazor | TypeScript | React </MudText>
    <MudContainer Class="d-block d-md-none px-0 mt-2">
        <MudStack Justify="Justify.SpaceEvenly" Spacing="0" Row="true">
            <MudChip Href="https://ssw.com.au/people/matt-parker" Target="_blank" Icon="@Icons.Material.Filled.Person" Color="Color.Error">SSW.People</MudChip>
            <MudChip Href="https://www.linkedin.com/in/mattparkerdev" Target="_blank" Icon="@Icons.Custom.Brands.LinkedIn" Color="Color.Primary">LinkedIn</MudChip>
            <MudChip Href="https://github.com/MattParkerDev" Target="_blank" Icon="@Icons.Custom.Brands.GitHub" Color="Color.Dark">GitHub</MudChip>
            <MudChip Href="https://twitter.com/MattParkerDev" Target="_blank" Icon="@Icons.Custom.Brands.Twitter" Color="Color.Info">Twitter</MudChip>
        </MudStack>
    </MudContainer>
</MudPaper>

@code {
    private string _avatarIconClass = "avatar-float";
    private string _animationLoopIterations = "infinite";
    private bool _animationCancellationScheduled = false;
    
    private DotNetObjectReference<Index>? objRef;

    protected override void OnInitialized()
    {
        objRef = DotNetObjectReference.Create(this);
    }

    private async Task ScheduleAnimationOrCancelAnimation()
    {
        //_animationLoopIterations = "1";
        if (_avatarIconClass == "")
        {
            AddAnimationClass();
            _animationCancellationScheduled = false;
            return;
        }
        Console.WriteLine("Scheduled animation cancellation");
        _animationCancellationScheduled = true;
        await JsRuntime.InvokeVoidAsync("registerAnimationEventListener", objRef);
    }

    [JSInvokable]
    public void RemoveAnimationClassIfScheduled()
    {
        Console.WriteLine("On animation end fired");
        if (_animationCancellationScheduled)
        {
            RemoveAnimationClass();
        }
    }
    
    private void RemoveAnimationClass()
    {
        _avatarIconClass = "";
        StateHasChanged();
    }
    
    private void AddAnimationClass()
    {
        _avatarIconClass = "avatar-float";
        StateHasChanged();
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }

}