@page "/"

@implements IDisposable
@inject IJSRuntime JsRuntime

<SeoHeader Title="Home" Description="My portfolio website and where I blog about .NET, Azure and all things software." />

<div class="flex flex-col-reverse md:flex-row justify-between items-center gap-8 md:gap-8">
    <MudContainer Class="mx-0 w-full md:w-[60%]">
        <MudText Align="Align.Center" Typo="Typo.h1" Class="text-bold" GutterBottom="true">Hi, I'm Matt Parker!</MudText>
        <MudText Align="Align.Center" Class="d-none d-sm-block" Typo="Typo.body1" Style="font-weight: bold">Software Engineer at SSW | C# | .NET | Blazor | TypeScript | React </MudText>
        <MudContainer Class="d-none d-md-flex mx-0 px-0 mt-3 w-full justify-center">
            <div class="flex flex-row justify-between w-[80%] self-center">
                <MudChip T="string" Href="https://ssw.com.au/people/matt-parker" Target="_blank" Icon="@Icons.Material.Filled.Person" Color="Color.Primary">SSW.People</MudChip>
                <MudChip T="string" Href="https://www.linkedin.com/in/mattparkerdev" Target="_blank" Icon="@Icons.Custom.Brands.LinkedIn" Color="Color.Primary">LinkedIn</MudChip>
                <MudChip T="string" Href="https://github.com/MattParkerDev" Target="_blank" Icon="@Icons.Custom.Brands.GitHub" Color="Color.Primary">GitHub</MudChip>
                <MudChip T="string" Href="https://twitter.com/MattParkerDev" Target="_blank" Icon="@Icons.Custom.Brands.Twitter" Color="Color.Primary">Twitter</MudChip>
            </div>
            
        </MudContainer>
    </MudContainer>

    <img alt="Hero Image" class="rounded-xl w-[80%] md:w-[40%]" src="img/hero.svg"/> @* border-[6px] border-text *@
    @* <MudAvatar @onclick="ScheduleAnimationOrCancelAnimation" Class="@_avatarIconClass" Elevation="16" Style="width: 300px; height: 300px; cursor: pointer"> *@
    @*     <CustomImage Src="img/github-profile-pic" PreferredExtensionOrder="avif,webp,png" Width="300" Height="300" Alt="MattParkerDev's Profile Picture" /> *@
    @* </MudAvatar> *@
</div>
    
    <MudText Class="d-flex d-sm-none" Typo="Typo.body1" Style="font-weight: bold" >Software Engineer at SSW<br/> C# | .NET | Blazor | TypeScript | React </MudText>
    <MudContainer Class="d-block d-md-none px-0 mt-2">
        <MudStack Justify="Justify.SpaceEvenly" Spacing="0" Row="true">
            <MudChip T="string" Href="https://ssw.com.au/people/matt-parker" Target="_blank" Icon="@Icons.Material.Filled.Person" Color="Color.Error">SSW.People</MudChip>
            <MudChip T="string" Href="https://www.linkedin.com/in/mattparkerdev" Target="_blank" Icon="@Icons.Custom.Brands.LinkedIn" Color="Color.Primary">LinkedIn</MudChip>
            <MudChip T="string" Href="https://github.com/MattParkerDev" Target="_blank" Icon="@Icons.Custom.Brands.GitHub" Color="Color.Dark">GitHub</MudChip>
            <MudChip T="string" Href="https://twitter.com/MattParkerDev" Target="_blank" Icon="@Icons.Custom.Brands.Twitter" Color="Color.Info">Twitter</MudChip>
        </MudStack>
    </MudContainer>


@code {
    private string _avatarIconClass = "";
    private bool _animationCancellationScheduled = false;
    
    private DotNetObjectReference<Index>? _objRef;

    protected override void OnInitialized()
    {
        _objRef = DotNetObjectReference.Create(this);
    }

    private async Task ScheduleAnimationOrCancelAnimation()
    {
        if (_avatarIconClass == "")
        {
            AddAnimationClass();
            _animationCancellationScheduled = false;
            return;
        }
        _animationCancellationScheduled = true;
        await JsRuntime.InvokeVoidAsync("registerAnimationEventListener", _objRef);
    }

    [JSInvokable]
    public void RemoveAnimationClassIfScheduled()
    {
        if (_animationCancellationScheduled)
        {
            RemoveAnimationClass();
        }
    }
    
    private void RemoveAnimationClass()
    {
        _avatarIconClass = "";
        StateHasChanged();
    }
    
    private void AddAnimationClass()
    {
        _avatarIconClass = "avatar-float";
        StateHasChanged();
    }

    public void Dispose()
    {
        _objRef?.Dispose();
    }
}
